geo_redditi %>% filter(Regione=="Piemonte") %>%
ggplot(aes(geometry=geometry, fill=Reddito_pro_capite)) +
scale_fill_distiller(palette=3) + # range più ampio di luminosità
geom_sf(color=NA) +
geom_sf_text(aes(label=Comune), size=2, hjust="left", data=function(.d) .d %>% filter(Reddito_pro_capite == max(Reddito_pro_capite)))
geo_redditi %>% filter(Sigla_Provincia=="TO") %>%
ggplot(aes(geometry=geometry, fill=Reddito_pro_capite)) +
scale_fill_distiller(palette=12) + # range più ampio di luminosità
geom_sf(color=NA) +
geom_sf_label(aes(label=Comune), size=2, hjust="left", data=function(.d) .d %>% filter(Reddito_pro_capite == max(Reddito_pro_capite))) +
theme_bw()
library(shiny)
# id                   # label                      # items
# selectInput("Sigla_Provincia", "Seleziona la provincia", c("TO", "CN", "AT", "AL", "VC", "BI", "VB", "NO"), selected="TO")
tutte_province <- sort(unique(geo_redditi$Sigla_Provincia))
tutte_regioni <- sort(unique(geo_redditi$Regione))
selectInput("Sigla_Provincia", "Seleziona la provincia", choices=tutte_province, selected="TO")
selectInput("Regione", "Seleziona la regione", choices = tutte_regioni)
#updateNomeFunzioneUsataPerGenerareInput
updateSelectInput(inputId = "provincia", choices = ( geo_redditi %>%
filter(Regione == input$Regione) %>%
select(Sigla_provincia) %>%
distinct())$Sigla_provincia)
geo_redditi
library(shiny)
# id                   # label                      # items
# selectInput("Sigla_Provincia", "Seleziona la provincia", c("TO", "CN", "AT", "AL", "VC", "BI", "VB", "NO"), selected="TO")
tutte_province <- sort(unique(geo_redditi$Sigla_Provincia))
tutte_regioni <- sort(unique(geo_redditi$Regione))
selectInput("Sigla_Provincia", "Seleziona la provincia", choices=tutte_province, selected="TO")
selectInput("Regione", "Seleziona la regione", choices = tutte_regioni)
library(tidyverse)
library(magrittr)
#download.file("https://www1.finanze.gov.it/finanze/analisi_stat/public/v_4_0_0/contenuti/Redditi_e_principali_variabili_IRPEF_su_base_comunale_CSV_2020.zip?d=1615465800","Redditi_e_principali_variabili_IRPEF_su_base_comunale_CSV_2020.zip")
#non funziona per qualche problema con i certificati...
redditi <- read_csv2("Redditi_e_principali_variabili_IRPEF_su_base_comunale_CSV_2020.zip") ## legge il CSV all'interno dello zip!
redditi$`Sigla Provincia` %>% unique()
names(redditi)
# sostituire i nomi delle colonne con versioni più brevi
names(redditi)[4] <- "Comune"
names(redditi)[5] <- "Sigla_Provincia"
names(redditi)[8] <- "Numero_contribuenti"
names(redditi)[23] <- "Reddito_imponibile_frequenza"
names(redditi)[24] <- "Reddito_imponibile_ammontare"
## informazioni sulla distirbuzione (sintesi a 5 numeri e istogramma/profilo di frequenza)
summary(redditi$Reddito_imponibile_ammontare)
redditi %>% ggplot(aes(x=Reddito_imponibile_ammontare)) +
geom_freqpoly() + #parametro binwidth = 1e5
theme_bw()
# geom_histogram()
## In alternativa è possibile customizzare il grafico:
library(scales)
redditi %>% ggplot(aes(x=Reddito_imponibile_ammontare/1000000)) +
geom_freqpoly() +
scale_x_log10(labels=label_dollar(prefix = "M€")) +
theme_bw()
## Coefficiente di correlazione
with(redditi, cor(Numero_contribuenti, Reddito_imponibile_ammontare)) # with dice 'prendere le colonne di redditi come se fossero variabili'. Alternativamente:
cor(redditi$Numero_contribuenti, redditi$Reddito_imponibile_ammontare)
## Mostrare graficamente la correlazione tra contribuenti e reddito imponibile
redditi %>% ggplot(aes(x=Numero_contribuenti, y=Reddito_imponibile_ammontare)) +
geom_point(alpha=0.3)
## trovare il comune col maggior reddito imponibile
m <- max(redditi$Reddito_imponibile_ammontare)
redditi %>%
filter(Reddito_imponibile_ammontare==m) # vettore di booleani con tutto a false tranne uno
# Viene rimossa la regione non identificabile
redditi <- redditi %>% filter(Regione != "Mancante/errata")
## trovare i comuni col maggior reddito imponibile per regione
maxRegione <- redditi %>%
group_by(Regione) %>%
filter(Reddito_imponibile_ammontare==max(Reddito_imponibile_ammontare)) %>%
select(Regione, Comune, Reddito_imponibile_ammontare)
maxRegione
redditi %>%
ggplot(aes(x=Reddito_imponibile_ammontare)) +
geom_dotplot(dotsize = 0.02) +              ## metto un altro df, l'importante che x e y                                                   siano compatibili
geom_dotplot(dotsize = 0.2, color="orange", data=maxRegione)+
scale_x_log10(labels=label_dollar(prefix = "€"))
redditi %>% ggplot(aes(x=Reddito_imponibile_ammontare/1000000, color=Regione)) +
geom_freqpoly() +
scale_color_discrete(guide="none") + ## toglie la legenda
scale_x_log10(labels=label_dollar(prefix = "M€")) +
theme_bw()
## --> assolutamente illeggibile!!
## Meglio una soluzione di questo tipo:
redditi %>% ggplot(aes(x=Reddito_imponibile_ammontare/1000000)) +
geom_freqpoly() +
facet_wrap(Regione~., scales = "free_y") + ## libera la scala y, ogni grafico avrà la sua
scale_color_discrete(guide="none") +
scale_x_log10(labels=label_dollar(prefix = "M€")) +
theme_bw()
### aggiungere una colonna con il reddito medio pro-capite e mostrare la distribuzione
redditi %<>%
#select(Numero_contribuenti, Reddito_imponibile_ammontare) %>%
mutate(Reddito_pro_capite=(Reddito_imponibile_ammontare/Numero_contribuenti))
redditi %>%
ggplot(aes(x=Reddito_pro_capite)) +
geom_histogram() +
ggtitle("Istogramma")
redditi %>%
ggplot(aes(x=Reddito_pro_capite)) +
geom_freqpoly(binwidth=1000) +
ggtitle("Poligono di frequenza")
## trovare i comuni col maggior reddito imponibile pro-capite per regione (mostrare solo regione, nome comune e reddito-pro capite medio)
# redditi$Regione <- factor(redditi$Regione)
res <- redditi %>%
select(Regione, Comune, Reddito_pro_capite) %>%
group_by(Regione) %>%
filter(Reddito_pro_capite==max(Reddito_pro_capite))
res
## mostrare i redditi medi pro-capite per regione con un diagramma
res1 <- redditi %>%
group_by(Regione) %>%
summarise(mediaP=(sum(Reddito_imponibile_ammontare)/sum(Numero_contribuenti)))
res1
res1 %>%
arrange(mediaP) %>%
mutate(Regione = as_factor(Regione)) %>% ## senza conversione non prende
ggplot(aes(y=Regione, x=mediaP)) +
geom_col()  +
geom_text(aes(label=paste0(round(mediaP/1000,1),"k€")),hjust=1,color="white")
# geom_label(aes(label=round(media,2)), hjust="inward")
## Correzione:
redditi %>% group_by(Regione) %>%
summarize(pro_capite = mean(pro_capite)) %>% ## media delle medie per comune (pesa tutti i comuni allo stesso modo)
arrange(pro_capite) %>%
mutate(Regione = as_factor(Regione)) %>%
ggplot(aes(y=Regione,x=pro_capite))+
geom_col() +
geom_text(aes(label=paste0(round(pro_capite/1000,1),"k€")),hjust=1,color="white")
library(sf);                                                            #codifica ita
shapes <- read_sf("esempi2022-main-Com01012022_g/Com01012022_g/Com01012022_g_WGS84.shp")
ggplot(shapes, aes(geometry=geometry)) + geom_sf()
library(sf);                                                            #codifica ita
shapes <- read_sf("esempi2022-main-Com01012022_g/Com01012022_g/Com01012022_g_WGS84.shp")
ggplot(shapes, aes(geometry=geometry)) + geom_sf()
ggplot(shapes, aes(geometry=geometry, fill=COMUNE=="Torino")) +
scale_fill_manual(values=c("white", "gold"), guide="none") +
geom_sf()
geo_redditi <- inner_join(shapes, redditi, by=c(PRO_COM_T="Codice Istat Comune"))
# !! sh va sempre per primo !!
# names(redditi)
# names(shapes)
# shapes %>% filter(COMUNE=="Torino");
# redditi %>% filter(Comune=="TORINO");
ggplot(geo_redditi, aes(geometry=geometry, fill=Reddito_pro_capite)) +
geom_sf(color=NA)
geo_redditi %>% filter(Regione=="Piemonte") %>%
ggplot(aes(geometry=geometry, fill=Reddito_pro_capite)) +
scale_fill_distiller(palette=3) + # range più ampio di luminosità
geom_sf(color=NA) +
geom_sf_text(aes(label=Comune), size=2, hjust="left", data=function(.d) .d %>% filter(Reddito_pro_capite == max(Reddito_pro_capite)))
geo_redditi %>% filter(Sigla_Provincia=="TO") %>%
ggplot(aes(geometry=geometry, fill=Reddito_pro_capite)) +
scale_fill_distiller(palette=12) + # range più ampio di luminosità
geom_sf(color=NA) +
geom_sf_label(aes(label=Comune), size=2, hjust="left", data=function(.d) .d %>% filter(Reddito_pro_capite == max(Reddito_pro_capite))) +
theme_bw()
library(shiny)
# id                   # label                      # items
# selectInput("Sigla_Provincia", "Seleziona la provincia", c("TO", "CN", "AT", "AL", "VC", "BI", "VB", "NO"), selected="TO")
tutte_province <- sort(unique(geo_redditi$Sigla_Provincia))
tutte_regioni <- sort(unique(geo_redditi$Regione))
selectInput("Sigla_Provincia", "Seleziona la provincia", choices=tutte_province, selected="TO")
selectInput("Regione", "Seleziona la regione", choices = tutte_regioni)
plotOutput("mappa")
observeEvent(input$Regione, {
message("Regione: ", input$Regione)
#updateNomeFunzioneUsataPerGenerareInput
updateSelectInput(inputId = "provincia", choices = ( geo_redditi %>%
filter(Regione == input$Regione) %>%
select(Sigla_provincia) %>%
distinct() %>%
arrange(Sigla_provincia))$Sigla_provincia)
})
## stesso output di prima --> va detto a shiny come fare!
output$mappa <- #step 1
renderPlot( #step 2
{
geo_redditi %>% filter(Sigla_Provincia==input$Sigla_Provincia) %>%
ggplot(aes(geometry=geometry, fill=Reddito_pro_capite)) +
scale_fill_distiller(palette=12) +
geom_sf(color=NA) +
geom_sf_label(aes(label=Comune), size=2, hjust="left", data=function(.d) .d %>% filter(Reddito_pro_capite == max(Reddito_pro_capite))) +
ggtitle("Provincia: ", input$Sigla_provincia) +
theme_void()
}
)
setwd("C:/Users/filip/Desktop/PoliTo/Tesi triennale/Database")
library(shiny)
library(ggplot2)
library(tidyverse)
library(magrittr)
cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
cities
temp <- cities %>% head(150) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% select(-`Flag and Footnotes`)
cities %<>% mutate(Value=str_replace_all(Value,"[: ]",""))
## conversione in integer
cities %>% mutate(Value=parse_integer(Value))
cities %>% filter(str_match(CITIES, "[^a-zA-Z]")!="")
# cities %>% mutate(CITIES=str_replace_all(CITIES, "[<f3>]", "o"))
# cities %>% mutate(CITIES=str_replace_all(CITIES, "^[<fc>]$", "u"))
# cities %>% mutate(CITIES=str_replace_all(CITIES, c("<e8>"="e")))
write_csv(cities, "urban_cities_tidier.csv")
stations <- read_csv("stations/stations-master/stations.csv")
stations
stations <- read_csv("stations/stations-master/stations.csv", delim=";")
stations <- read_csv2("stations/stations-master/stations.csv")
stations
station %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled)
stations %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled)
stations <- read_csv2("stations/stations-master/stations.csv")
stations
stations %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, `info:zh`)
stations %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, `info:zh`)
stations %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`)
stations %>% knitr::kable()
View(cities)
bool1 <- citites %>% filter(CITIES %in% stations$name)
bool1 <- cities %>% filter(CITIES %in% stations$name)
bool1
bool1 <- cities %>% filter(!(CITIES %in% stations$name))
bool1
View(stations)
cities <- read_csv("urb_ctour/urb_ctour_1_Data_utf8.csv")
cities
cities <- read_csv2("urb_ctour/urb_ctour_1_Data_utf8.csv")
cities
cities <- read_csv("urb_ctour/urb_ctour_1_Data_utf8.csv")
cities
cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
cities
cities <- read_csv2("urb_ctour/urb_ctour_1_Data.csv")
cities
stations %>%
filter(name="München")
stations %>%
filter(name=="München")
library(shiny)
library(ggplot2)
library(tidyverse)
library(magrittr)
cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
cities
temp <- cities %>% head(150) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% select(-`Flag and Footnotes`)
cities %<>% mutate(Value=str_replace_all(Value,"[: ]",""))
## conversione in integer
cities %>% mutate(Value=parse_integer(Value))
cities %>% filter(str_match(CITIES, "[^a-zA-Z]")!="")
# cities %>% mutate(CITIES=str_replace_all(CITIES, "[<f3>]", "o"))
# cities %>% mutate(CITIES=str_replace_all(CITIES, "^[<fc>]$", "u"))
# cities %>% mutate(CITIES=str_replace_all(CITIES, c("<e8>"="e")))
write_csv(cities, "urban_cities_tidier.csv")
stations <- read_csv2("stations/stations-master/stations.csv")
stations
stations %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`)
write_csv(stations, "stations_tidier")
names(stations)
View(stations)
stations %>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`)
write_csv(stations, "stations_tidier")
names(stations)
names(stations)
stations %<>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`)
write_csv(stations, "stations_tidier")
bool1 <- cities %>% filter(!(CITIES %in% stations$name))
stations %>% filter(name=="munchen")
stations %>% filter(slug=="munchen")
names(stations)
write_csv(stations, "stations_tidier")
stations %<>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`, -flixbus_id)
stations <- read_csv2("stations/stations-master/stations.csv")
stations
stations %<>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`, -flixbus_id)
write_csv(stations, "stations_tidier")
write_csv(stations, "stations_tidier.csv")
setwd("C:/Users/filip/Desktop/PoliTo/Tesi triennale/Database")
prova <- read_xlsx("provaTesiCitta.xlsx")
library(shiny)
library(ggplot2)
library(tidyverse)
library(magrittr)
cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
cities
temp <- cities %>% head(150) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% select(-`Flag and Footnotes`)
cities %<>% mutate(Value=str_replace_all(Value,"[: ]",""))
## conversione in integer
cities %>% mutate(Value=parse_integer(Value))
cities %>% filter(str_match(CITIES, "[^a-zA-Z]")!="")
# cities %>% mutate(CITIES=str_replace_all(CITIES, "[<f3>]", "o"))
# cities %>% mutate(CITIES=str_replace_all(CITIES, "^[<fc>]$", "u"))
# cities %>% mutate(CITIES=str_replace_all(CITIES, c("<e8>"="e")))
write_csv(cities, "urban_cities_tidier.csv")
stations <- read_csv2("stations/stations-master/stations.csv")
stations
stations %<>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`, -flixbus_id)
write_csv(stations, "stations_tidier.csv")
prova <- read_xlsx("provaTesiCitta.xlsx")
prova <- read_xls("provaTesiCitta.xlsx")
library(readxl)
prova <- read_xlsx("provaTesiCitta.xlsx")
prova
View(prova)
# cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
# cities
library(readxl)
cities <- read_xlsx("provaTesiCitta.xlsx")
citites
# cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
# cities
library(readxl)
cities <- read_xlsx("provaTesiCitta.xlsx")
cities
View(cities)
View(prova)
drop(prova)
prova <- c("")
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA", "2019", "NA", "2020", "NA")
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
library(shiny)
library(ggplot2)
library(tidyverse)
library(magrittr)
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
View(temp)
statesEU <- levels(temp$CITIES)
statesEU
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% filter(!(CITIES %in% statesEU))
cities %>% filter(!(CITIES %in% statesEU))
# cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
# cities
library(readxl)
cities <- read_xlsx("provaTesiCitta.xlsx")
cities
# cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
# cities
library(readxl)
cities <- read_xlsx("provaTesiCitta.xlsx")
cities
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA", "2019", "NA", "2020", "NA")
# cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
# cities
library(readxl)
cities <- read_xlsx("provaTesiCitta.xlsx")
cities
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA", "2019", "NA", "2020", "NA")
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!(CITIES %in% statesEU))
statesEU
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% filter(CITIES %in% statesEU)
cities %<>% select(-"NA", -"NA", -"NA")
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA1", "2019", "NA2", "2020", "NA3")
cities %<>% select(-"NA1", -"NA2", -"NA3")
cities %<>% mutate(Value=str_replace_all(Value,"[: ]",""))
cities %<>% mutate(.$2018=str_replace_all(Value,"[: ]",""))
cities %<>% mutate(Value=str_replace_all(2018,"[: ]",""))
cities %<>% mutate(2018=str_replace_all(2018,"[: ]",""))
cities %<>% mutate(V2018=str_replace_all(2018,"[: ]",""))
cities %<>% mutate(V2018=str_replace_all(.$2018,"[: ]",""))
cities %<>% mutate(V2018=str_replace_all(.$"2018","[: ]",""))
cities %<>% mutate(V2018=str_replace_all(.$"2018","[: ]",""))
cities %<>% mutate(V2019=str_replace_all(.$"2019","[: ]",""))
cities %<>% mutate(V2020=str_replace_all(.$"2020","[: ]",""))
## conversione in integer
cities %>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
## conversione in integer
cities %<>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
cities %<>% mutate(V2018=str_replace_all(.$"2018","[: ]","0"))
cities %<>% mutate(V2019=str_replace_all(.$"2019","[: ]","0"))
cities %<>% mutate(V2020=str_replace_all(.$"2020","[: ]","0"))
## conversione in integer
cities %<>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
cities %>% head(-204)
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
# cities <- read_csv("urb_ctour/urb_ctour_1_Data.csv")
# cities
library(readxl)
cities <- read_xlsx("provaTesiCitta.xlsx")
cities
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA1", "2019", "NA2", "2020", "NA3")
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% select(-"NA1", -"NA2", -"NA3")
cities %<>% mutate(V2018=str_replace_all(.$"2018","[: ]","0"))
cities %<>% mutate(V2019=str_replace_all(.$"2019","[: ]","0"))
cities %<>% mutate(V2020=str_replace_all(.$"2020","[: ]","0"))
## conversione in integer
cities %<>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
cities %<>% mutate(V2018=str_replace_all(.$"2018","[:]","0"))
cities %<>% mutate(V2019=str_replace_all(.$"2019","[:]","0"))
cities %<>% mutate(V2020=str_replace_all(.$"2020","[:]","0"))
## conversione in integer
cities %<>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
write_csv(cities, "urban_cities_tidier.csv")
## tolgo le vecchie colonne della serie temporale
cities %<>% select(-"2018", -"2019", -"2020")
write_csv(cities, "urban_cities_tidier.csv")
bool1 <- cities %>% filter(!(CITIES %in% stations$name))
bool1
unique(bool1)
bool1 <- cities %>% filter(!(CITIES %in% stations$name)) %>% select(-CITIES)
unique(bool1)
bool1 <- cities %>% filter(!(CITIES %in% stations$name)) %>% select(CITIES)
unique(bool1)
unique(bool1)
t2 <- cities %>% filter(!(name %in% cities$CITIES)) %>% select(name)
View(cities)
View(stations)
t2 <- stations %>% filter(!(name %in% cities$CITIES)) %>% select(name)
unique(bool2)
unique(t2)
cities %>% mutate(slug=str_replace_all(CITIES, c("[è|é]"="e", "[ò|ó]"="o")))
Creo un nuovo campo all'interno del quale sono contenuti i nomi delle città in minuscolo e senza accenti. In questo modo sarà più facile il confronto anche in caso di salvataggi con lettere accentate diverse tra i due database.
```{r}
cities %>% mutate(slug=str_replace_all(CITIES, c("[è|é]"="e", "[ò|ó]"="o", "[ü|ú|ù]"="u")))
```
cities %>% mutate(slug=str_replace_all(CITIES, c("[è|é]"="e", "[ò|ó]"="o", "[ü|ú|ù]"="u")))
cities %>% mutate(slug=str_replace_all(tolower(CITIES), c("[è|é]"="e", "[ò|ó]"="o", "[ü|ú|ù]"="u")))
cities %<>% mutate(slug=str_replace_all(tolower(CITIES), c("[è|é]"="e", "[ò|ó]"="o", "[ü|ú|ù]"="u", "[ì|í|ï]"="i", "[ä|à|á]"="a", "[ñ]"="n", "[ ]"="-", "ç"="c")))
## inserisco il '-' al posto dello spazio anche nel database sulle stazioni
stations %<>% mutate(slug=str_replace_all(slug, c("[ ]"="-")))
library(shiny)
library(ggplot2)
library(readxl)
library(tidyverse)
library(magrittr)
cities <- read_xlsx("urb_ctour/cities.xlsx")
cities
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA1", "2019", "NA2", "2020", "NA3")
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% select(-"NA1", -"NA2", -"NA3")
cities %<>% mutate(V2018=str_replace_all(.$"2018","[:]","0"))
cities %<>% mutate(V2019=str_replace_all(.$"2019","[:]","0"))
cities %<>% mutate(V2020=str_replace_all(.$"2020","[:]","0"))
## conversione in integer
cities %<>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
## tolgo le vecchie colonne della serie temporale
cities %<>% select(-"2018", -"2019", -"2020")
stations <- read_csv2("stations/stations-master/stations.csv")
stations
stations %<>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`, -flixbus_id)
t1 <- cities %>% filter(!(CITIES %in% stations$name)) %>% select(CITIES)
t2 <- stations %>% filter(!(name %in% cities$CITIES)) %>% select(name)
cities %<>% mutate(slug=str_replace_all(tolower(CITIES), c("[è|é]"="e", "[ò|ó]"="o", "[ü|ú|ù]"="u", "[ì|í|ï]"="i", "[ä|à|á]"="a", "[ñ]"="n", "[ ]"="-", "ç"="c")))
## inserisco il '-' al posto dello spazio anche nel database sulle stazioni
stations %<>% mutate(slug=str_replace_all(slug, c("[ ]"="-")))
write_csv(cities, "urban_cities_tidier.csv")
write_csv(stations, "stations_tidier.csv")
library(shiny)
library(ggplot2)
library(readxl)
library(tidyverse)
library(magrittr)
cities <- read_xlsx("urb_ctour/cities.xlsx")
cities
names(cities) <- c("CITIES", "INDIC_UR", "2018", "NA1", "2019", "NA2", "2020", "NA3")
temp <- cities %>% head(204) %>% select(CITIES) %>% mutate(CITIES = as_factor(CITIES))
statesEU <- levels(temp$CITIES)
cities %<>% filter(!CITIES %in% statesEU)
cities %<>% select(-"NA1", -"NA2", -"NA3")
cities %<>% mutate(V2018=str_replace_all(.$"2018","[:]","0"))
cities %<>% mutate(V2019=str_replace_all(.$"2019","[:]","0"))
cities %<>% mutate(V2020=str_replace_all(.$"2020","[:]","0"))
## conversione in integer
cities %<>% mutate(V2018=parse_integer(V2018), V2019=parse_integer(V2019), V2020=parse_integer(V2020))
## tolgo le vecchie colonne della serie temporale
cities %<>% select(-"2018", -"2019", -"2020")
stations <- read_csv2("stations/stations-master/stations.csv")
stations
stations %<>%
select(-uic8_sncf, -country_hint, -main_station_hint, -sncf_tvs_id, -sncf_id, -sncf_is_enabled, -entur_id, -entur_is_enabled, -db_id, -db_is_enabled, -busbud_id, -busbud_is_enabled, -distribusion_id, -distribusion_is_enabled, -cff_id, -cff_is_enabled, -leoexpress_id, -leoexpress_is_enabled, -obb_id, -obb_is_enabled, -ouigo_id, -ouigo_is_enabled, -trenitalia_id, -trenitalia_is_enabled, -trenitalia_rtvt_id, -ntv_id, -ntv_rtiv_id, -ntv_is_enabled, -hkx_id, -hkx_is_enabled, -renfe_is_enabled, -renfe_id, -atoc_id, -atoc_is_enabled, -benerail_id, -benerail_is_enabled, -westbahn_id, -westbahn_is_enabled, -same_as, -`info:de`, -`info:en`, -`info:es`, -`info:fr`, -`info:it`, -`info:nb`, -`info:nl`, -`info:cs`, -`info:cs`, -`info:da`, -`info:hu`, -`info:ja`, -`info:ko`, -`info:pl`, -`info:pt`, -`info:ru`, -`info:sv`, -`info:tr`, -`info:zh`, -flixbus_id)
t1 <- cities %>% filter(!(CITIES %in% stations$name)) %>% select(CITIES)
t2 <- stations %>% filter(!(name %in% cities$CITIES)) %>% select(name)
cities %<>% mutate(slug=str_replace_all(tolower(CITIES), c("[è|é]"="e", "[ò|ó]"="o", "[ü|ú|ù]"="u", "[ì|í|ï]"="i", "[ä|à|á]"="a", "[ñ]"="n", "[ ]"="-", "ç"="c")))
## inserisco il '-' al posto dello spazio anche nel database sulle stazioni
stations %<>% mutate(slug=str_replace_all(slug, c("[ ]"="-")))
write_csv(cities, "urban_cities_tidier.csv")
write_csv(stations, "stations_tidier.csv")
